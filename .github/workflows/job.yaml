name: Continuous Integration for Java with Maven, SonarQube, and Deployment to Production

on:
  push:
    branches:
      - main
      - 'feature/*'
  pull_request:
    branches:
      - main
      - 'feature/*'
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Initiate production deployment'
        required: true
        default: 'false'

jobs:
  # Parallel Job: Build and Test on EC2 with Tomcat
  build_and_test:
    runs-on: [self-hosted, staging]  # Self-hosted EC2 with Tomcat (Staging)
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Set up the environment (env-setup.sh)
        run: |
          chmod +x ./env-setup.sh
          ./env-setup.sh  # Installs Java, Maven, etc.

      - name: Build the project using Maven
        run: mvn clean install
        if: ${{ github.event_name != 'pull_request' }}  # Execute only for push events

      - name: Execute Unit Tests with Maven
        run: mvn test
        if: ${{ success() }}  # Run tests if the build was successful

  # Sequential Jobs: Run SonarQube analysis and upload the artifact
  sonar_analysis:
    runs-on: [self-hosted, staging]  # Self-hosted EC2 with Tomcat (Staging)
    needs: build_and_test
    if: ${{ needs.build_and_test.result == 'success' }}  # Execute if build/test passed
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Perform SonarQube analysis
        run: |
          mvn clean verify sonar:sonar \
            -Dsonar.organization=vineeth394 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.projectKey=vineeth394_assignment \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  upload_artifact:
    runs-on: [self-hosted, staging]  # Self-hosted EC2 with Tomcat (Staging)
    needs: build_and_test
    if: ${{ needs.build_and_test.result == 'success' }}  # Execute if build/test passed
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Upload artifact to JFrog Artifactory
        run: |
          echo "Uploading the artifact to JFrog Artifactory..."
          sudo curl -u "${{ secrets.ARTIFACTORY_USER }}:${{ secrets.ARTIFACTORY_PASSWORD }}" -T "target/my-helloworld-1.0-snapshot.war" "http://44.222.253.17:8082/artifactory/assignment-vik-libs-snapshot/my-helloworld-1.0-snapshot2.war"

  # Matrix Job: Deployment to Staging and Production environments
  deploy:
    strategy:
      matrix:
        node: [staging, production]  # Deploy to both environments
    runs-on: ${{ matrix.node }}  # Dynamically selects staging or production
    needs: [sonar_analysis, upload_artifact]  # Wait for SonarQube analysis and artifact upload
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Deploy to Tomcat (Staging or Production)
        run: |
          echo "Deploying to the ${matrix.node} environment..."

          # Deploy the artifact based on the environment
          if [ "${{ matrix.node }}" == "staging" ]; then
            sudo chown -R ubuntu:ubuntu /opt
            cd /opt/apache-tomcat-10.1.34/webapps/
            curl -L -u "${{ secrets.ARTIFACTORY_USER }}:${{ secrets.ARTIFACTORY_PASSWORD }}" -O "http://44.222.253.17:8082/artifactory/assignment-vik-libs-snapshot/my-helloworld-1.0-snapshot1.war"
          elif [ "${{ matrix.node }}" == "production" ]; then
            sudo chown -R ubuntu:ubuntu /opt
            cd /opt/apache-tomcat-10.1.34/webapps/
            curl -L -u "${{ secrets.ARTIFACTORY_USER }}:${{ secrets.ARTIFACTORY_PASSWORD }}" -O "http://44.222.253.17:8082/artifactory/assignment-vik-libs-snapshot/my-helloworld-1.0-snapshot1.war"
          else
            echo "Skipping deployment: Node does not match"
          fi
        if: ${{ needs.upload_artifact.result == 'success' }}  # Deploy if the artifact upload is successful

  # Conditional Job: Trigger Deploy Only if Deploy Input is True (Manual Trigger)
  deploy_input_condition:
    runs-on: [self-hosted, production]  # Self-hosted EC2 with Tomcat (Production)
    if: ${{ github.event.inputs.deploy == 'true' }}  # Triggered manually
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Deploy to Production (Manual Triggered)
        run: |
          echo "Manual deployment triggered, deploying to production..."
          # Deployment logic for production
